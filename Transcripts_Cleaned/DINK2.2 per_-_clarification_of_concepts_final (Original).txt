In this module we are going to unfold different aspects of scalability. I will first take you through some of the key concepts and some of the considerations that are important, and based on that and some questions that we will ask, you will be able to explore more in depth through the rest of this module. Scalability is the ability of a system to suit your different needs over time. It might be growing with the number of users, but in some cases it can also be shrinking as you have periods when there are less users that are using your systems. You can do this in different ways. You can scale systems up by adding more computers, or you can do it by also buying faster and more expensive, usually, computers to deal with it. But it is also sometimes possible to design for scalability. Maybe you don't need to store all of your data in one large database. Maybe you can decentralize. Maybe people that live in Los Angeles don't know about what is being sold here in Copenhagen or the other way around. That is some of the topics that we are going to deal with today, and we will also be digging into, for instance, some of the aspects of security and how you can design your systems to be able to respond to your users' needs. Scalability comes with some risks, but also some opportunities. In terms of the risks, then availability, performance and reliability are issues that you need to consider. So, are security issues, the increasing amount of users might cause more attack points, and you also need to have a way to safely manage your users and the roles they have in your systems. When we use a service, we are sometimes okay if there are minor glitches or if there is a functionality that is a little bit odd to use, as long as we actually find the service overall useful. But one of the things that we are not really prepared to deal with is lack of availability or lack of reliability. There are some good recent research papers also that shows that we are willing to deal with certain issues, but if we remove functionality or if generally there is a lack of availability, then we actually fly away from those systems. We don't even want to fight them, we just uninstall the app and we leave the system. So when you are designing systems, it is important to consider how you make them available so that you can access them, how you make them perform so you don't have to make people wait a long time to get a reply, and how you make it reliable so you get consistent and desired answers to your prompts or whatever you are engaging with. Sometimes these are solvable by scaling up the systems, but sometimes they also need design considerations, how do you divide the different parts of your system, where do you store data, is it stored locally on your computer or your access device, or is it stored somewhere in the cloud. And that might be issues that you have to consider already from day one when you design the system. Let's also look at the opportunities. So sometimes a growing amount of users actually create more value. If you are the only person in a car sharing system, you don't actually have that much benefit from it. And you could even say that even if there is a good number of users, if there is nobody else that are near you or share the same transportation patterns, then there is actually not much value in such a system for you. So that refers to what is called the network effect, that more users can create more value. The network effect has sort of different phases and different ways of looking at this. So one model talks about a cold start problem, and then the next phase is the critical mass, and then you might go to a bandwagon or an inflection point where a lot of users can join. So let's take those for a bit by bit. So in terms of the cold start problem, that deals with having enough data or having enough user to have at least some value for those that are joining your service. I already mentioned the example of the car sharing, but there could also be other places where you want to have enough data so you can offer, for instance, a set of recommendations for users. Netflix started out this way by shipping DVDs so that they could get some insights into what people would be using, and they used that data to solve part of their cold start problem. At some point when you have enough users, you get through this critical mass, so every new user can find somebody to interact with or benefit from the data that is already in the system. And if you can keep attracting users and your systems are scaling well, then you will probably see an inflection point where you can just increase the number of users, at least up to a certain point where every new user adds value, or at least as long as you can keep your systems available and performing and still offering the reliability that you wish for. There could also be other benefits. You might be able to attract third-party users or third-party collaborators. Perhaps you can offer services that you would not be able to create on your own, but you can do that because you have enough critical mass. There are many examples of this. Perhaps Amazon is one quite well known, where a lot of other companies or smaller companies are sort of collaborating. They bring some added value and they might sort of join that ecosystem. And it might also be that your transaction costs per user will go down. Perhaps you need to have some expensive equipment or some expensive services that you have to have running all the time, but sometimes if you scale your systems well, you can actually lower the transaction cost per user or per transaction through your systems. So scalability is about growing your systems, or perhaps in some cases shrinking them, so that the costs of running the systems actually match your users' expectations and you're able to deliver the user experience to the users at the end of the day that they expect from your systems. We will unfold that through a number of chapters. There will be a few short mini-lectures that helps you to understand some of the key concepts. There are some really, really interesting case studies that we will delve into. And there's also a podcast that tries to unfold some of the dilemmas that we are in reality facing when designing systems.
